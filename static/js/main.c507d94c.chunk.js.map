{"version":3,"sources":["SidebarOption.js","Sidebar.js","TweetBox.js","Post.js","Feed.js","Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Sidebar","HomeIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","Button","variant","fullWidth","TweetBox","Avatar","src","placeholder","type","Post","displayName","username","verified","image","avatar","alt","fontSize","Feed","Widgets","tweetId","sourceType","screenName","options","height","url","via","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c507d94c.chunk.js","sourcesContent":["import React from 'react';\nimport \"./SidebarOption.css\";\n\nfunction SidebarOption({ active, text, Icon }) {\n    return (\n        <div className={`sidebarOption ${active && \"sidebarOption--active\"}`}>\n            <Icon />\n            <h2>{text}</h2>\n            \n        </div>\n    )\n}\n\nexport default SidebarOption;\n","import React from 'react';\nimport \"./Sidebar.css\";\nimport SidebarOption from './SidebarOption';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport HomeIcon from '@material-ui/icons/Home';\nimport SearchIcon from '@material-ui/icons/Search';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport { Button } from \"@material-ui/core\";\n\n\nfunction Sidebar() {\n    return (\n        <div className='sidebar'>\n            {/* Twitte Icons */}\n            <TwitterIcon  className=\"sidebar__twitterIcon\"/>\n\n            <SidebarOption active Icon={HomeIcon} text=\"Home\" />\n            <SidebarOption Icon={SearchIcon} text=\"Explore\" />\n            <SidebarOption Icon={NotificationsNoneIcon} text=\"Notifications\" />\n            <SidebarOption Icon={MailOutlineIcon} text=\"Message\" />\n            <SidebarOption Icon={BookmarkBorderIcon} text=\"Bookmarks\" />\n            <SidebarOption Icon={ListAltIcon} text=\"Lists\" />\n            <SidebarOption Icon={PermIdentityIcon} text=\"Profile\" />\n            <SidebarOption Icon={MoreHorizIcon} text=\"More\" />\n            \n\n            {/* Button -> Tweet */}\n            <Button variant=\"outlined\" className=\"sidebar__Tweet\" fullWidth >Tweet</Button>\n            \n        </div>\n    )\n}\n\nexport default Sidebar;\n","import React from 'react';\nimport \"./TweetBox.css\";\nimport { Avatar, Button } from \"@material-ui/core\";\n\nfunction TweetBox() {\n    return (\n        <div className=\"tweetbox\">\n            <form>\n                <div className=\"tweetbox__input\">\n                    <Avatar src=\"https://image.freepik.com/free-vector/profile-icon-male-avatar-hipster-man-wear-headphones_48369-8728.jpg\" />\n                    <input placeholder=\"What's happening?\" type=\"text\" />\n                </div>\n                {/* <input className=\"tweetbox__imageInput\" placeholder=\"Enter image URL\" type=\"text\" /> */}\n\n                <Button className=\"tweetBox__tweetButton\">Tweet</Button>\n            </form>\n        </div>\n    )\n}\n\nexport default TweetBox;\n","import { Avatar } from '@material-ui/core';\nimport React from 'react';\nimport \"./Post.css\";\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport PublishIcon from '@material-ui/icons/Publish';\n\n\nfunction Post( {\n    displayName,\n    username,\n    verified,\n    text,\n    image,\n    avatar\n}) {\n    return (\n        <div className=\"post\">\n            <div className=\"post__avatar\">\n                <Avatar src={avatar} />\n            </div>\n            <div className=\"post__body\">\n                 <div className=\"post__header\">\n                     <div className=\"post__headerText\">\n                        <h3>{displayName}{\" \"} \n                            <span className=\"post__headerSpecial\">\n                               {verified && <VerifiedUserIcon className=\"post__badge\" />}  @{username}\n                            </span>\n                        </h3>\n                     </div>\n                     <div className=\"post__headerDescription\">\n                        <p>{text}</p>\n                     </div>\n                </div>\n                     <img src={image} alt=\"\" />\n                     <div className=\"post__footer\">\n                        <ChatBubbleOutlineIcon fontSize=\"small\" />\n                        <RepeatIcon fontSize=\"small\" />\n                        <FavoriteBorderIcon fontSize=\"small\" />\n                        <PublishIcon fontSize=\"small\" />\n                      \n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Post;\n","import React from \"react\";\nimport \"./Feed.css\";\nimport TweetBox from \"./TweetBox\";\nimport Post from \"./Post\";\n\n\nfunction Feed() {\n        \n    return (\n        <div className=\"feed\">\n            {/* Header */}\n            <div className=\"feed__header\">\n            <h2>Home</h2>\n            </div>\n            {/* TweetBox */}\n            <TweetBox />\n\n            {/* Post */}\n            \n            \n            <Post displayName=\"Rajat\"\n            username= \"RajatPrasad\"\n            verified = \"true\"\n            text=\"Helllooooo everyone\"\n            avatar=\"https://image.freepik.com/free-vector/profile-icon-male-avatar-hipster-man-wear-headphones_48369-8728.jpg\"\n            image=\"https://media0.giphy.com/media/1iv69y6QxMS2SUmPvC/giphy.gif\"\n            />\n\n            <Post displayName=\"Rajat\"\n            username= \"RajatPrasad\"\n            verified = \"true\"\n            text=\"Miss those days....\"\n            avatar=\"https://image.freepik.com/free-vector/profile-icon-male-avatar-hipster-man-wear-headphones_48369-8728.jpg\"\n            image=\"https://media1.giphy.com/media/Q7XVySfOWIUEKj1AAj/giphy.gif\"\n            /> \n\n            <Post displayName=\"Rajat\"\n            username= \"RajatPrasad\"\n            verified = \"true\"\n            text=\"Do what you love â™¥\"\n            avatar=\"https://image.freepik.com/free-vector/profile-icon-male-avatar-hipster-man-wear-headphones_48369-8728.jpg\"\n            image=\"https://i.pinimg.com/originals/34/fb/b9/34fbb9aa7bfeb8df98412067d64c2029.gif\"\n            />\n            \n            <Post displayName=\"Rajat\"\n            username= \"RajatPrasad\"\n            verified = \"true\"\n            text=\"Magic is every where\"\n            avatar=\"https://image.freepik.com/free-vector/profile-icon-male-avatar-hipster-man-wear-headphones_48369-8728.jpg\"\n            image=\"https://www.makersmakingchange.com/wp-content/uploads/2018/01/Wizard-Clap-by-Markus-Magnusson.gif\"\n            /> \n            \n            \n        </div>\n    )\n}\n\nexport default Feed;\n","import React from 'react';\nimport \"./Widgets.css\"\nimport {\n    TwitterTimelineEmbed,\n    TwitterShareButton,\n    TwitterTweetEmbed\n} from \"react-twitter-embed\";\nimport SearchIcon from '@material-ui/icons/Search';\n\nfunction Widgets() {\n    return (\n        <div className=\"widgets\">\n            <div className=\"widgets__input\">\n                <SearchIcon className=\"widgets__searchIcon\" />\n                <input placeholder=\"Search Twitter\" type=\"text\" />\n            </div>\n\n            <div className=\"widgets__widgetContainer\">\n                <h2>What's happning</h2>\n                <TwitterTweetEmbed tweetId={\"1315205605884399616\"} />\n\n                <TwitterTimelineEmbed\n                sourceType=\"profile\"\n                screenName=\"Rajatprasad009\"\n                options={{ height: 400 }}\n                />\n\n                <TwitterShareButton\n                url={\"https://www.facebook.com/\"}\n                options={{ text: \"#reactjs is awesome\", via: \"Rajatprasad009\" }}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default Widgets;\n","import React from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Feed from './Feed';\nimport Widgets from './Widgets';\n\n\n\n\n\nfunction App() {\n  return (\n    // BEM\n    <div className=\"app\">\n\n    {/* Sidebar */}\n    <Sidebar />\n\n    {/* Feed */}\n    <Feed />\n\n    {/* Widgets */}\n    <Widgets />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}